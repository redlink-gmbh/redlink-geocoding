<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>io.redlink.geocoding</groupId>
        <artifactId>geocoding</artifactId>
        <version>1.1.0-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>

    <artifactId>geocoding-proxy-server</artifactId>
    <name>Geocoding :: Proxy-Server</name>

    <properties>
        <docker.image.namespace>${project.parent.artifactId}</docker.image.namespace>
        <docker.image.buildId>latest</docker.image.buildId>

        <docker.local.skip>false</docker.local.skip>
        <docker.upload.skip>false</docker.upload.skip>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>io.redlink.geocoding</groupId>
            <artifactId>proxy-commons</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>io.redlink.geocoding</groupId>
            <artifactId>geocoding-spring-boot-autoconfigure</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.redlink.geocoding</groupId>
            <artifactId>geocoding-cache</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.redlink.geocoding</groupId>
            <artifactId>geocoding-osm</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.redlink.geocoding</groupId>
            <artifactId>geocoding-google</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <Automatic-Module-Name>io.redlink.geocoding.proxy.server</Automatic-Module-Name>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>3.1.2</version>
                <executions>
                    <execution>
                        <id>docker-local</id>
                        <phase>install</phase>
                        <goals>
                            <goal>dockerBuild</goal>
                        </goals>
                        <configuration>
                            <from>
                                <platforms>
                                    <platform>
                                        <architecture>${os.arch}</architecture>
                                        <os>linux</os>
                                    </platform>
                                </platforms>
                            </from>
                            <skip>${docker.local.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>docker-upload</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <from>
                                <platforms>
                                    <platform>
                                        <architecture>amd64</architecture>
                                        <os>linux</os>
                                    </platform>
                                    <platform>
                                        <architecture>arm64</architecture>
                                        <os>linux</os>
                                    </platform>
                                </platforms>
                            </from>
                            <skip>${docker.upload.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <from>
                        <image>openjdk:11-jre-slim</image>
                    </from>
                    <to>
                        <image>${docker.image.namespace}/${project.artifactId}:${project.version}</image>
                        <tags>
                            <tag>${docker.image.buildId}</tag>
                        </tags>
                    </to>
                    <container>
                        <creationTime>${maven.build.timestamp}</creationTime>
                        <filesModificationTime>${maven.build.timestamp}</filesModificationTime>
                        <user>nobody:root</user>
                        <ports>
                            <port>8080</port>
                        </ports>
                    </container>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>